// set this to true for production
const doCache = false

// name our cache
const CACHE_NAME = 'my-pwa-cache-v1'

// delete old caches that are not our current one
self.addEventListener("activate", event => {
    const cacheWhiteList = [CACHE_NAME];
    event.waitUntil(
        caches.keys()
            .then(keyList =>
              Promise.all(keyList.map(key => {
                  if (!cacheWhiteList.includes(key)) {
                      console.log('Deleting cache: ' + key)
                      return caches.delete(key);
                  }
              }))
            )
    )
})

// the first time the user starts up the PWA, 'install' is triggered
self.addEventListener('install', function(event){
    if (doCache) {
        event.waitUntil(
            caches.open(CACHE_NAME)
                .then(function(cache) {
                    // get the asset manifest so we can see what our js file is named
                    // this is because webpack hashes it
                    fetch("asset-manifest.json")
                        .then(response => {
                            response.json()
                        })
                        .then(assets => {
                            // open a cache and cache our files
                            // we want to cache the page and the main.js generated by webpack
                            // we could also cache any static assets like CSS or images
                            const urlsToCache = [
                                "/",
                                assets["main.js"]
                            ]
                            cache.addAll(urlsToCache)
                            console.log('cached')
                        })
                    })
                 )
        }
})

// when the webpage goes ot fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function(event){
    if(doCache) {
        event.respondWith(
            caches.match(event.request).then(function(response) {
                return response || fetch(event.request);
            })
        )
    }
})